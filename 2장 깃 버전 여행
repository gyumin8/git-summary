2장] 깃 버전 여행

<--깃 설정과 저장소 생성-->

주요 깃 설정{

주요 명령) 
$ git config [--system | --global | --local ] ->설정변수 설정값

주요 설정변수와 값)
core.editor ['code --wait'|'notepad'] -> 기본 편집기 설정
core.autocrlf [true | false | input] -> 줄바꿈 자동변환
core.safecrlf [true | false] -> 줄바꿈 안전확인
user.name gyumin38 -> 사용자 이름
user.email gyumin38@gmail.com -> 사용자 전자메일
init.defaultBranch main -> 기본 브랜치 이름
}

깃 저장소 준비{

주요 명령)
$ git init 
$ git init [git_repo] -> 현재 폴더 또는 지정한 폴더이름 git_repo를 생성하고 깃 저장소로 저장

<--파일 생성과 추가-->

버전을 관리하고 싶은 파일 생성)

$ echo create > hello.txt
$ cat hello.txt
create

상태 보기)
$ git status [--long] -> 현재의 상태 표시
$ git status [--short | -s] -> 현재의 상태를 간단히 표시
$ git status [--help | -h] -> 도움말 보기
*처음 만들어진 파일은 untracked file 이 됨.

추적되지 않는 파일을 인덱스에 추가(add))
$ git add file -> 파일 file 추가
$ git add file1 file2 -> 여러 파일 file1 file2 등 추가
$ git add . -> 하부 모든 파일 추가
$ git add [--all | -A] 하부 모든 파일 추가

<--커밋과 로그 이력-->

커밋) : 버전 관리를 위해 현재 스테이지 영역의 내용에 대해 스냅샷을 찍는 명령
주요명령)
$ git commit -> 커밋 메시지를 입력할 편집기 실행
$ git commit -m 'message' -> 커밋 메시지를 직접 입력
$ git commit -a -m 'message' 
$ git commit -am 'message' -> 추가와 커밋을 함께 실행

로그 이력)
주요명령)
$ git log -> 로그 이력 정보를 표시
$ git log --oneline -> 로그 이력을 한 줄로 표시
$ git log [--patch | -p] -> 로그 이력과 함께 파일의 변화를 표시
*커밋 ID는 SHA-1 암호 알고리즘에 의해 40개의 16진수로 표현됨.

$ git log --graph -> 문자 그림으로 로그 이력 그리기
$ git log --reverse -> 오래된 커밋부터 표시 --graph와 함께 사용할 수 없음
$ git log -all -> 모든 브랜치의 로그 이력 표시
$ git log -n -> 최근 n개의 로그 이력 표시

커밋 정보 git show)
주요 명령)
$ git show -> HEAD의 커밋 정보 표시
$ git show --oneline -> 커밋 로그 한 줄과 파일 차이 표시
$ git show -s -> 파일 차이는 표시되지 않음
$ git show [HEAD] -> 지정한 HEAD의 커밋 정보 표시
$ git show [commitID] -> 지정한 commitID의 커밋 정보 표시



