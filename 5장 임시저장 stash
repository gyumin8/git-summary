stash 개요>
한 브랜치에서 작업을 하다 커밋 이전에 다른 브랜치로 이동하려면 checkout이나 switch가 되지 않는다.
이 때 명령 stash로 이전 상태로 돌린다.

주요명령)
$git satsh                                   
$git stash -m '임시저장 메시지'               
$git stash save                              
$git stash save '임시저장 메시지'  

stah는 스택 구조이다.
*스택구조->한쪽으로만 삽입과 삭제 가능

첫 커밋이 안된 상태에서는 임시저장이 불가능.
커밋 이후 작업 공간이 깨끗한 상태에서도 불가능.


$git stash list ->임시저장 목록 보기

$git stash show
$git stash show stash@{n}  ->현재 WD와 임시저장 stash의 내용을 비교해 보이기, 명시한 stash가 없으면 최신 임시저장으로 비교

stash apply->임시저장된 내용을 현재 브랜치 상태에 적용하기

주요명령)
$git stash apply
$git stash apply stahs@{n} ->명시한 stash가 없으면 현재의 작업 영역에 최신 임시저장 내용을 반영하고 목록에는 영향을 미치지 않음


stash로 추적되지 않는 파일 저장

주요명령)
$git stash --include-untracked
$git stash -u                   ->작업 영역의 untracked 파일도 함께 저장


stash로 스테이지 영역 복원

주요명령)
$ git stash apply --index
$ git stash apply --index stash@{n} ->명시한 stash가 없으면 현재의 작업 영역과 스테이지 영역에 최신 임시저장 내용을 반영, 목록에는 영향 x

stash에서 임시저장 메세지를 지정

주요 명령) 
$ git stash save '메시지'
$ git stash -m '메시지'    ->현재의 작업 영역과 스테이지 영역에 있는 파일들을 임시 보관, 메시지도 함께 저장


$git stash drop
$git stash drop stash@{n}  ->임시 보관 목록에서 stash를 삭제, 명시한 stash가 없으면 최근 stash를 삭제

스테이지 영역을 유지하고 stash에 저장하지 않는 방법

주요명령)
$ git stash --keep-index | -k 
$ git stash save --keep-index | -k -> 스테이지 영역은 유지하고 임시 보관에 저장하지 않는 방식

stash에서 최근 stash를 적용하고 목록에서 제거

주요명령)
$ git stash pop
$ git stash pop stash@{n}  -> 최근 stash나 지정한 stash@{n}을 적용하고 임시저장 목록에서 제거


$ git stash clear -> stash 임시 보관 목록을 모두 삭제

$ git clean -> untracked 파일을 삭제
옵션들 1. -i | --interacive : 대화형으로 삭제 내용을 물어 확인하는 방식.
       2. -h  : 명령의 도움말 확인 가능
       3. -f  : 무조건 삭제
       4. -n  : 삭제될 파일을 먼저 보이기








